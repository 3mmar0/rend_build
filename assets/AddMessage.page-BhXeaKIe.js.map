{"version":3,"file":"AddMessage.page-BhXeaKIe.js","sources":["../../src/features/customerRelations/forms/addMessage/Submission.tsx","../../src/features/customerRelations/forms/addMessage/MessageInfo.tsx","../../src/features/customerRelations/forms/schemas/add-message-schema.ts","../../src/features/customerRelations/forms/addMessage/AddMessageForm.tsx","../../src/features/customerRelations/pages/AddMessage.page.tsx"],"sourcesContent":["import SuccessPopup from '@/components/Popups/SuccessPopup';\r\nimport { SecondaryButton } from '@/components/buttons/SecondaryButton';\r\nimport { PrimaryButton } from '@/components/buttons/PrimaryButton';\r\nimport CancelPopup from '@/components/Popups/CancelPopup';\r\nimport { MaintenanceOrder } from '@/types/maintenance';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    maintenanceOrder?: MaintenanceOrder | null;\r\n    showSuccessPopup: boolean;\r\n    setShowSuccessPopup: (value: boolean) => void;\r\n    showCancelPopup: boolean;\r\n    setShowCancelPopup: (value: boolean) => void;\r\n    loading: boolean;\r\n}\r\nexport default function Submission({\r\n    maintenanceOrder,\r\n    setShowCancelPopup,\r\n    setShowSuccessPopup,\r\n    showCancelPopup,\r\n    showSuccessPopup,\r\n    loading,\r\n}: Props) {\r\n    const navigate = useNavigate();\r\n\r\n    const handleAddAnother = () => {\r\n        setShowSuccessPopup(false);\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"flex flex-row justify-end items-center mt-8\">\r\n                {maintenanceOrder ? (\r\n                    <SecondaryButton\r\n                        type=\"button\"\r\n                        className=\"xl:px-[87px] xl:py-3 text-[#A21515] border border-red-error-50 xl:font-semibold bg-red-error-50\"\r\n                        onClick={() => setShowCancelPopup(true)}\r\n                    >\r\n                        إلغاء الطلب\r\n                    </SecondaryButton>\r\n                ) : (\r\n                    <SecondaryButton\r\n                        type=\"button\"\r\n                        className=\"xl:px-[87px] xl:py-3 border bordr-[#E8EFF6] xl:font-semibold\"\r\n                        onClick={() => setShowCancelPopup(true)}\r\n                    >\r\n                        الغاء\r\n                    </SecondaryButton>\r\n                )}\r\n                <div>\r\n                    {maintenanceOrder ? (\r\n                        <PrimaryButton className=\"xl:px-[91px] xl:py-3 xl:font-semibold ms-6\" disabled={loading}>\r\n                            {loading ? 'جاري التحميل...' : 'حفظ التغييرات'}\r\n                        </PrimaryButton>\r\n                    ) : (\r\n                        <PrimaryButton className=\"xl:px-[125px] xl:py-3 xl:font-semibold ms-6\" disabled={loading}>\r\n                            {loading ? 'جاري التحميل...' : 'إرسال'}\r\n                        </PrimaryButton>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <CancelPopup\r\n                open={showCancelPopup}\r\n                onClickButton1={() => {\r\n                    setShowCancelPopup(false);\r\n                }}\r\n                onClickButton2={() => {\r\n                    navigate('/customer-relations/customer-communication');\r\n                    setShowCancelPopup(false);\r\n                }}\r\n                text1={maintenanceOrder ? 'تم الغاء تعديل الرسالة' : 'تم الغاء الرسالة'}\r\n                text2={\r\n                    maintenanceOrder\r\n                        ? 'أنت على وشك إلغاء عملية تعديل الرسالة دون إكمال البيانات المطلوبة. سيتم تجاهل جميع البيانات المدخلة، هل أنت متأكد؟'\r\n                        : 'أنت على وشك إلغاء عملية ارسال الرسالة للعميل  دون إكمال البيانات المطلوبة. سيتم تجاهل جميع البيانات المدخلة، هل أنت متأكد؟'\r\n                }\r\n                textButton1=\"إكمال الارسال\"\r\n                textButton2=\"إلغاء الارسال\"\r\n            />\r\n            <SuccessPopup\r\n                text1={maintenanceOrder ? 'تم تعديل  بنحاح' : 'تم ارسال الرسالة  للعميل  بنحاح'}\r\n                text2={maintenanceOrder ? 'تم تعديل الرسالة بنجاح.' : 'تم ارسال الرسالة للعميل  بنجاح.'}\r\n                textButton1=\"العودة لقائمة الرسائل\"\r\n                textButton2={maintenanceOrder ? 'العودة لقائمة الرسائل' : 'ارسال رسالة اخرى'}\r\n                open={showSuccessPopup}\r\n                onAddAnother={handleAddAnother}\r\n                onReturnToList={() => {\r\n                    navigate('/customer-relations/customer-communication');\r\n                    setShowSuccessPopup(false);\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n","import SearchableSelectInputForm from '@/components/forms/SearchableSelectInputForm';\r\nimport SelectInputForm from '@/components/forms/SelectInputForm';\r\nimport TextInputForm from '@/components/forms/TextInputForm';\r\nimport { endpoints } from '@/lib/axios/axios-global';\r\nimport { apiGet } from '@/lib/axios/axios-utils';\r\nimport { Customer } from '@/types/customer.types';\r\nimport { useEffect, useState } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\ninterface Props {\r\n    id: string | undefined;\r\n}\r\nexport default function MessageInfo({ id }: Props) {\r\n    const { setValue } = useFormContext();\r\n    const [customers, setCustomers] = useState<{ name: string; value: string }[]>([]);\r\n    const [customersError, setCustomersError] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        const fetchCustomers = async () => {\r\n            try {\r\n                const response = await apiGet({ endpoint: endpoints.customer.list });\r\n\r\n                const options = response.data.data.data.map((center: Customer) => {\r\n                    return { name: center.full_name, value: String(center.id) };\r\n                });\r\n                setCustomers(options);\r\n                setCustomersError(null);\r\n            } catch (error) {\r\n                setCustomersError('Error fetching customers. Please try again later.');\r\n            }\r\n        };\r\n\r\n        fetchCustomers();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (customers.length > 0) {\r\n            setValue('customer_id', id ? String(id) : undefined);\r\n        }\r\n    }, [customers]);\r\n\r\n    return (\r\n        <div className=\"my-6\">\r\n            <div className=\"grid grid-cols-1 gap-6\">\r\n                <SearchableSelectInputForm\r\n                    name=\"customer_id\"\r\n                    placeholder=\"بحث عن اسم أو كود العميل\"\r\n                    label=\"اسم العميل\"\r\n                    options={customers}\r\n                    error={customersError}\r\n                    data={id}\r\n                />\r\n                <TextInputForm name=\"subject\" placeholder=\"بحث عن منتج، أو كتابة عنوان الرسالة\" label=\"موضوع الرسالة\" />\r\n                <SelectInputForm\r\n                    name=\"send_method\"\r\n                    placeholder=\"طريقة ارسال الرسالة\"\r\n                    label=\"طريقة ارسال الرسالة\"\r\n                    options={[\r\n                        { name: 'رسالة SMS', value: 'sms' },\r\n                        { name: 'Email', value: 'email' },\r\n                    ]}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { z } from 'zod';\r\n\r\nexport const AddMessageSchema = z.object({\r\n    customer_id: z.string().min(1, 'Customer field is required.'),\r\n    subject: z.string().min(1, 'Address is required'),\r\n    send_method: z.string().min(1, 'The message reception type field is required.'),\r\n    message: z.string().min(1, 'Description is required'),\r\n});\r\n\r\nexport type AddMessageFormValues = z.infer<typeof AddMessageSchema>;\r\n","import { Form } from '@/components/ui/form';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { apiPost } from '@/lib/axios/axios-utils';\r\nimport { endpoints } from '@/lib/axios/axios-global';\r\nimport { useMemo, useState } from 'react';\r\nimport { RichTextEditor } from '@/components/forms/textEditor/RichTextInput';\r\nimport Submission from './Submission';\r\nimport MessageInfo from './MessageInfo';\r\nimport { AddMessageFormValues, AddMessageSchema } from '../schemas/add-message-schema';\r\n\r\ninterface Props {\r\n    id?: string | undefined;\r\n}\r\n\r\nexport default function AddMessageForm({ id }: Props) {\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [showSuccessPopup, setShowSuccessPopup] = useState(false);\r\n    const [showCancelPopup, setShowCancelPopup] = useState(false);\r\n\r\n    const defaultValues = useMemo(\r\n        () => ({\r\n            customer_id: '',\r\n            subject: '',\r\n            send_method: '',\r\n            message: '',\r\n        }),\r\n        [],\r\n    );\r\n\r\n    const form = useForm<AddMessageFormValues>({\r\n        resolver: zodResolver(AddMessageSchema),\r\n        defaultValues,\r\n    });\r\n\r\n    const onSubmit = async (data: AddMessageFormValues) => {\r\n        setError(null); // Clear previous errors\r\n        setLoading(true);\r\n        try {\r\n            await apiPost({\r\n                endpoint: endpoints.cutomerContact.create,\r\n                body: data,\r\n                config: { headers: { 'Content-Type': 'multipart/form-data' } },\r\n            });\r\n            setShowSuccessPopup(true);\r\n        } catch (error: any) {\r\n            if (error.response?.data?.errors) {\r\n                // Handle field-specific errors\r\n                Object.entries(error.response.data.errors).forEach(([field, messages]) => {\r\n                    form.setError(field as any, {\r\n                        type: 'manual',\r\n                        message: (messages as string[]).join(', '),\r\n                    });\r\n                });\r\n            } else {\r\n                // Handle generic error\r\n                let errorMessage = 'حدث خطأ أثناء إرسال البيانات. يرجى المحاولة مرة أخرى.';\r\n                if (error.response) {\r\n                    errorMessage = error.response.data.msg || errorMessage;\r\n                } else if (error.request) {\r\n                    errorMessage = 'تعذر الاتصال بالخادم. يرجى التحقق من اتصالك بالإنترنت.';\r\n                }\r\n                setError(errorMessage);\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form {...form}>\r\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"mb-8\">\r\n                    {error && (\r\n                        <div className=\"mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg\">\r\n                            <div className=\"flex justify-between items-center\">\r\n                                <span className=\"\">{error}</span>\r\n                                <button onClick={() => setError(null)} className=\"text-red-700 hover:text-red-900\">\r\n                                    ×\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <MessageInfo id={id} />\r\n                    <div>\r\n                        <p className=\"text-primery-blue-900 font-medium text-[18px] leading-[33.73px] tracking-normal text-start mb-4\">\r\n                            نص الرسالة\r\n                        </p>\r\n                        <RichTextEditor form={form} name=\"message\" placeholder=\"ادخل وصف الرسالة\" />\r\n                    </div>\r\n                    <Submission\r\n                        loading={loading}\r\n                        setShowCancelPopup={setShowCancelPopup}\r\n                        setShowSuccessPopup={setShowSuccessPopup}\r\n                        showCancelPopup={showCancelPopup}\r\n                        showSuccessPopup={showSuccessPopup}\r\n                    />\r\n                </form>\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n","import AddBulkIcon from '@/components/icons/BulkAddIcon';\r\nimport AddMessageForm from '../forms/addMessage/AddMessageForm';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function AddMessage() {\r\n    const params = useParams();\r\n    const { id } = params;\r\n    return (\r\n        <div className=\"w-full mt-6 p-4\">\r\n            <div className=\"flex flex-row items-center justify-start\">\r\n                <h1 className=\"font-bold text-[#080614] text-[24px] tracking-normal flex flex-row items-center gap-2\">\r\n                    <AddBulkIcon />\r\n                    انشاء رسالة\r\n                </h1>\r\n            </div>\r\n            <AddMessageForm id={id} />\r\n        </div>\r\n    );\r\n}\r\n"],"names":["Submission","maintenanceOrder","setShowCancelPopup","setShowSuccessPopup","showCancelPopup","showSuccessPopup","loading","navigate","useNavigate","handleAddAnother","jsxs","Fragment","jsx","SecondaryButton","PrimaryButton","CancelPopup","SuccessPopup","MessageInfo","id","setValue","useFormContext","customers","setCustomers","useState","customersError","setCustomersError","useEffect","options","apiGet","endpoints","center","SearchableSelectInputForm","TextInputForm","SelectInputForm","AddMessageSchema","z","AddMessageForm","error","setError","setLoading","defaultValues","useMemo","form","useForm","zodResolver","onSubmit","data","apiPost","field","messages","errorMessage","Form","RichTextEditor","AddMessage","params","useParams","AddBulkIcon"],"mappings":"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"}